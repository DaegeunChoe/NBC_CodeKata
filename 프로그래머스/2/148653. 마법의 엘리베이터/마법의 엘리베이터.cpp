#include <string>
#include <vector>

using namespace std;

// 0 1234 5 6879

// 255[4] 낮아지는 것이 가까운 방향, 
// 255[0] -1 4번
// 25[5]0 양쪽 다 같은 방향, 앞의 수를 확인. 앞의 수가 5이므로, 6으로 올림하는 것이 이득
// 26[0]0 +10 5번
// 2[6]00 커지는 것이 가까운 방향
// 3[0]00 +100 4번
// [3]000
// [0]000 -1000 3번

// 뒤의 수가 0이면 패스
// 뒤의 수가 [1,2,3,4] 이면,
// >> 앞의 수가 [0,1,2,3,4]이면, 최저 비용은 [0,1,2,3,4] + [1,2,3,4]
// >> 앞의 수가 5이면
//    >> 내림하는 경우, [5] + [1,2,3,4] 6, 7, 8, 9 <- 내림
//    >> 올림하는 경우, [4] + [9,8,7,6] 10,11,12,13
// >> 앞의 수가 6이면
//    >> 내림하는 경우, [4] + [1,2,3,4] 5, 6, 7,8 <- 내림
//    >> 올림하는 경우, [3] + [9,8,7,6] 9,10,11,12
// >> 앞의 수가 7이면
//    >> 내림하는 경우, [3] + [1,2,3,4] 4,5,6, 7 <- 내림
//    >> 올림하는 경우, [2] + [9,8,7,6] 8,9,10,11
// >> 앞의 수가 8이면
//    >> 내림하는 경우, [2] + [1,2,3,4] 3,4,5, 6 <- 내림
//    >> 올림하는 경우, [1] + [9,8,7,6] 7,8,9,10
// >> 앞의 수가 9이면
//    >> 내림하는 경우, [1] + [1,2,3,4] 2,3,4,5 <- 내림
//    >> 올림하는 경우, [0] + [9,8,7,6] 6,7,8,9

// 뒤의 수가 [5] 이면,
// >> 앞의 수가 [0,1,2,3,4]이면,
//    >> 내림하는 경우, [0,1,2,3,4] + [5] 5,6,7,8,9 <-내림
//    >> 올림하는 경우, [1,2,3,4,5] + [5] 6,7,8,9,10 
// >> 앞의 수가 [5]이면
//    >> 내림하는 경우, [5] + [5] 10
//    >> 올림하는 경우, [4] + [5] 9 <-올림
// >> 앞의 수가 [6,7,8,9]이면,
//    >> 내림하는 경우, [4,3,2,1] + [5] 9,8,7,6 
//    >> 올림하는 경우, [3,2,1,0] + [5] 8,7,6,5 <-올림

// 뒤의 수가 [6,7,8,9] 이면,
// >> 앞의 수가 [0,1,2,3,4]이면,
//    >> 내림하는 경우, [0,1,2,3,4] + [6,7,8,9] = 6-10, 7-11, 8-12, 9-13
//    >> 올림하는 경우, [1,2,3,4,5] + [4,3,2,1]
//    >>              [0,1,2,3,4] + [5,4,3,2] <- 항항 작음, 올림.
// >> 앞의 수가 5이면
//    >> 내림하는 경우, [5] + [6,7,8,9] 11,12,13,14
//    >> 올림하는 경우, [4] + [4,3,2,1] 5, 6, 7, 8 <-올림
// >> 앞의 수가 6이면
//    >> 내림하는 경우, [4] + [6,7,8,9] 10,11,12,13
//    >> 올림하는 경우, [3] + [4,3,2,1] 4, 5, 6, 7 <-올림
// >> 앞의 수가 7이면
//    >> 내림하는 경우, [3] + [6,7,8,9] 9,10,11,12
//    >> 올림하는 경우, [2] + [4,3,2,1] 3,4, 5, 6 <-올림
// >> 앞의 수가 8이면
//    >> 내림하는 경우, [2] + [6,7,8,9] 8,9,10,11
//    >> 올림하는 경우, [1] + [4,3,2,1] 2,3,4, 5 <-올림
// >> 앞의 수가 9이면
//    >> 내림하는 경우, [1] + [6,7,8,9] 7,8,9,10
//    >> 올림하는 경우, [0] + [4,3,2,1] 1,2,3,4 <-올림

// #include <iostream>

int solution(int storey) {
    
    int answer = 0;
    int cursor = 1;
    while (true) {
        
        int q = storey / cursor;
        if (q == 0) {
            break;
        }
        int a = q % 10;
        int b = (q / 10) % 10;
        // cout << "cursor,a,b: " << cursor << ", " << a << ", " << b << " | ";
        
        if (a == 0) {
            // 아무것도 하지 않는다.
        }
        else if (a <= 4) {
            // 앞의 수와 관계없이 내린다.
            answer += a;
            storey -= a * cursor;
        }
        else if (a == 5) {
            if (b <= 4) {
                // 내림
                answer += a;
                storey -= a * cursor;
            }
            else { // b <= 9
                // 올림
                answer += (10-a);
                storey += (10-a) * cursor;
            }
        }
        else { // a <= 9
            // 앞의 수와 관계없이 올린다.
            answer += (10-a);
            storey += (10-a) * cursor;
        }
        // cout << storey << endl;
        cursor *= 10;
    }
    return answer;
}